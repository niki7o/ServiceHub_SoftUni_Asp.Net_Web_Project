@model ServiceHub.Data.Models.ApplicationUser
@using Microsoft.AspNetCore.Identity
@using ServiceHub.Data.Models
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Нашите Планове";
    var currentUser = await UserManager.GetUserAsync(User);
    bool isBusinessUser = currentUser != null && await UserManager.IsInRoleAsync(currentUser, "BusinessUser");
    bool isAdmin = currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Admin");
}
<style>
    ﻿body {
        font-family: 'Inter', sans-serif;
        background: linear-gradient(135deg, #a8dadc 0%, #457b9d 100%);
        color: #333;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        overflow-x: hidden;
    }

    .plans-container {
        padding: 60px 30px;
        max-width: 1200px;
        margin: 0 auto;
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        align-items: center;
        background: linear-gradient(135deg, #a8dadc 0%, #457b9d 100%);
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        color: #fff;
    }

    .page-title {
        font-size: 3.2rem;
        font-weight: 800;
        color: #fff;
        margin-bottom: 50px;
        text-align: center;
        letter-spacing: -0.03em;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
    }

    .plan-cards-wrapper {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 30px;
        width: 100%;
    }

    .plan-card {
        background-color: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        padding: 30px;
        text-align: center;
        width: 100%;
        max-width: 380px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        color: #333;
    }

        .plan-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
        }

        .plan-card h3 {
            font-size: 2.2rem;
            font-weight: 700;
            color: #1d3557;
            margin-bottom: 20px;
        }

        .plan-card .price {
            font-size: 3rem;
            font-weight: 800;
            color: #e63946;
            margin-bottom: 25px;
        }

        .plan-card ul {
            list-style: none;
            padding: 0;
            margin-bottom: 30px;
            text-align: left;
            flex-grow: 1;
        }

            .plan-card ul li {
                font-size: 1.1rem;
                color: #555;
                margin-bottom: 12px;
                display: flex;
                align-items: center;
                gap: 10px;
            }

                .plan-card ul li i {
                    color: #28a745;
                    font-size: 1.2rem;
                }

        .plan-card .btn-upgrade {
            background-color: #e63946;
            color: white;
            padding: 15px 30px;
            border-radius: 10px;
            text-decoration: none;
            font-weight: 600;
            font-size: 1.1rem;
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 4px 15px rgba(230, 57, 70, 0.4);
            border: none;
            cursor: pointer;
        }

            .plan-card .btn-upgrade:hover {
                background-color: #d12c3b;
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(230, 57, 70, 0.5);
            }

        .plan-card .btn-current {
            background-color: #457b9d;
            color: white;
            padding: 15px 30px;
            border-radius: 10px;
            font-weight: 600;
            font-size: 1.1rem;
            cursor: default;
            opacity: 0.8;
            box-shadow: 0 4px 15px rgba(69, 123, 157, 0.4);
        }


    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.6);
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 30px;
        border-radius: 15px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        position: relative;
        animation: fadeIn 0.3s ease-out;
        color: #333;
    }



    .close-button {
        color: #aaa;
        position: absolute;
        top: 15px;
        right: 25px;
        font-size: 30px;
        font-weight: bold;
        cursor: pointer;
        transition: color 0.2s ease;
    }

        .close-button:hover,
        .close-button:focus {
            color: #333;
            text-decoration: none;
        }

    .modal-content h2 {
        text-align: center;
        color: #1d3557;
        margin-bottom: 30px;
        font-size: 2rem;
        font-weight: 700;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }

    .form-control {
        width: 100%;
        padding: 12px 15px;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 1rem;
        box-sizing: border-box;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

        .form-control:focus {
            border-color: #457b9d;
            box-shadow: 0 0 0 3px rgba(69, 123, 157, 0.2);
            outline: none;
        }

    .form-row {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
    }

        .form-row .form-group {
            flex: 1;
            margin-bottom: 0;
        }

    .validation-message {
        color: #e63946;
        font-size: 0.85rem;
        margin-top: 5px;
        display: block;
    }

    .payment-button {
        background-color: #28a745;
        color: white;
        padding: 15px 25px;
        border-radius: 10px;
        font-size: 1.1rem;
        font-weight: 600;
        border: none;
        cursor: pointer;
        width: 100%;
        transition: background-color 0.3s ease, transform 0.2s ease;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.4);
    }

        .payment-button:hover:not(:disabled) {
            background-color: #218838;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(40, 167, 69, 0.5);
        }

        .payment-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
            opacity: 0.7;
        }

    .loading-spinner {
        display: none;
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-top: 4px solid #1d3557;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }



    .alert-message {
        padding: 15px;
        border-radius: 8px;
        margin-top: 20px;
        font-weight: 500;
        text-align: center;
    }

    .alert-success-custom {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger-custom {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }


    @@media (max-width: 768px) {
        .plans-container

    {
        padding: 30px 15px;
    }

    .page-title {
        font-size: 2.5rem;
        margin-bottom: 30px;
    }

    .plan-cards-wrapper {
        flex-direction: column;
        align-items: center;
    }

    .plan-card {
        max-width: 90%;
    }

    .form-row {
        flex-direction: column;
        gap: 0;
    }

    }
</style>



<div class="plans-container">
    <h2 class="page-title">Нашите Планове</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success" role="alert">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger" role="alert">
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="plan-cards-wrapper">
     
        <div class="plan-card">
            <h3>Стандартен План</h3>
            <div class="price">Безплатно</div>
            <ul>
                <li><i class="fas fa-check-circle"></i> Достъп до основни услуги</li>
                <li><i class="fas fa-check-circle"></i> Ограничен брой използвания на премиум услуги</li>
                <li><i class="fas fa-times-circle" style="color: #e63946;"></i> Специално оцветено име</li>
                <li><i class="fas fa-times-circle" style="color: #e63946;"></i> Създаване на шаблони услуги</li>
                <li><i class="fas fa-times-circle" style="color: #e63946;"></i> Приоритетна поддръжка</li>
            </ul>
            <button class="btn-current" disabled>Текущ План</button>
        </div>

     
        <div class="plan-card">
            <h3>Бизнес План</h3>
            <div class="price">€9.99 / месец</div>
            <ul>
                <li><i class="fas fa-check-circle"></i> Неограничен достъп до всички услуги</li>
                <li><i class="fas fa-check-circle"></i> Възможност за създаване на шаблони услуги</li>
                <li><i class="fas fa-check-circle"></i> Приоритетна поддръжка</li>
                <li><i class="fas fa-check-circle"></i> Специално оцветено име</li>
               
                
            </ul>
            @if (isBusinessUser || isAdmin)
            {
                <button class="btn-current" disabled>Вече сте Бизнес Потребител</button>
            }
            else
            {
                <button id="openPaymentModalButton" class="btn-upgrade">Надграждане до Бизнес</button>
            }
        </div>
    </div>
</div>


<div id="paymentModal" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Плащане за Бизнес План</h2>
        <form id="paymentForm">
            <div class="form-group">
                <label for="cardNumber">Номер на карта (Mastercard):</label>
                <input type="text" id="cardNumber" class="form-control" placeholder="XXXX XXXX XXXX XXXX" maxlength="19">
                <span class="validation-message" id="cardNumberError"></span>
            </div>
            <div class="form-group">
                <label for="cardName">Име на картодържателя:</label>
                <input type="text" id="cardName" class="form-control" placeholder="Име Фамилия">
                <span class="validation-message" id="cardNameError"></span>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="expiryDate">Валидност (MM/YY):</label>
                    <input type="text" id="expiryDate" class="form-control" placeholder="ММ/ГГ" maxlength="5">
                    <span class="validation-message" id="expiryDateError"></span>
                </div>
                <div class="form-group">
                    <label for="cvc">CVC:</label>
                    <input type="text" id="cvc" class="form-control" placeholder="XXX" maxlength="4">
                    <span class="validation-message" id="cvcError"></span>
                </div>
            </div>
            <button type="submit" id="payButton" class="payment-button">Плати сега</button>
            <div id="loadingSpinner" class="loading-spinner"></div>
            <div id="paymentMessage" class="alert-message"></div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const openPaymentModalButton = document.getElementById('openPaymentModalButton');
            const paymentModal = document.getElementById('paymentModal');
            const closeButton = document.querySelector('.close-button');
            const paymentForm = document.getElementById('paymentForm');
            const payButton = document.getElementById('payButton');
            const loadingSpinner = document.getElementById('loadingSpinner');
            const paymentMessage = document.getElementById('paymentMessage');

            
            const cardNumberInput = document.getElementById('cardNumber');
            const cardNameInput = document.getElementById('cardName');
            const expiryDateInput = document.getElementById('expiryDate');
            const cvcInput = document.getElementById('cvc');

         
            const cardNumberError = document.getElementById('cardNumberError');
            const cardNameError = document.getElementById('cardNameError');
            const expiryDateError = document.getElementById('expiryDateError');
            const cvcError = document.getElementById('cvcError');

            
            if (openPaymentModalButton) {
                openPaymentModalButton.addEventListener('click', function () {
                    paymentModal.style.display = 'flex';
                    paymentForm.reset();
                    paymentMessage.style.display = 'none';
                    paymentMessage.className = 'alert-message';
                    hideAllValidationErrors();
                    payButton.disabled = false;
                    loadingSpinner.style.display = 'none';
                });
            }

            closeButton.addEventListener('click', function () {
                paymentModal.style.display = 'none';
            });

            window.addEventListener('click', function (event) {
                if (event.target == paymentModal) {
                    paymentModal.style.display = 'none';
                }
            });

           
            cardNumberInput.addEventListener('input', function (e) {
                let value = e.target.value.replace(/\s+/g, '');
                let formattedValue = '';
                for (let i = 0; i < value.length; i++) {
                    if (i > 0 && i % 4 === 0) {
                        formattedValue += ' ';
                    }
                    formattedValue += value[i];
                }
                e.target.value = formattedValue;
            });

            expiryDateInput.addEventListener('input', function (e) {
                let value = e.target.value.replace(/\D/g, '');
                if (value.length > 2) {
                    value = value.substring(0, 2) + '/' + value.substring(2, 4);
                }
                e.target.value = value;
            });

          
            function showValidationError(element, message) {
                element.textContent = message;
                element.style.display = 'block';
            }

            function hideValidationError(element) {
                element.textContent = '';
                element.style.display = 'none';
            }

            function hideAllValidationErrors() {
                hideValidationError(cardNumberError);
                hideValidationError(cardNameError);
                hideValidationError(expiryDateError);
                hideValidationError(cvcError);
            }

            
            function validateForm() {
                let isValid = true;
                hideAllValidationErrors();

                const cardNumber = cardNumberInput.value.replace(/\s/g, '');
                if (!/^(5[1-5]\d{14})$/.test(cardNumber) || cardNumber.length !== 16) {
                    showValidationError(cardNumberError, 'Невалиден номер на Mastercard (16 цифри, започва с 51-55).');
                    isValid = false;
                }

                if (cardNameInput.value.trim() === '') {
                    showValidationError(cardNameError, 'Името на картодържателя е задължително.');
                    isValid = false;
                }

                const expiryDate = expiryDateInput.value;
                const expiryRegex = /^(0[1-9]|1[0-2])\/?([0-9]{2})$/;
                if (!expiryRegex.test(expiryDate)) {
                    showValidationError(expiryDateError, 'Невалиден формат (ММ/ГГ).');
                    isValid = false;
                } else {
                    const [month, year] = expiryDate.split('/').map(Number);
                    const currentYear = new Date().getFullYear() % 100;
                    const currentMonth = new Date().getMonth() + 1;

                    if (year < currentYear || (year === currentYear && month < currentMonth)) {
                        showValidationError(expiryDateError, 'Картата е изтекла.');
                        isValid = false;
                    }
                }

                const cvc = cvcInput.value;
                if (!/^\d{3,4}$/.test(cvc)) {
                    showValidationError(cvcError, 'CVC трябва да е 3 или 4 цифри.');
                    isValid = false;
                }

                return isValid;
            }

            paymentForm.addEventListener('submit', function (e) {
                e.preventDefault();

                if (!validateForm()) {
                    return;
                }

                payButton.disabled = true;
                loadingSpinner.style.display = 'block';
                paymentMessage.style.display = 'none';

             
                setTimeout(function () {
                    const isPaymentSuccessful = true; 

                    if (isPaymentSuccessful) {
                      
                        fetch('/api/Subscription/subscribe', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({ confirmSubscription: true })
                        })
                        .then(response => {
                            if (!response.ok) {
                                return response.json().then(err => { throw new Error(err.message || 'Грешка при надграждане.'); });
                            }
                            return response.json();
                        })
                        .then(data => {
                            loadingSpinner.style.display = 'none';
                            paymentMessage.style.display = 'block';
                            if (data.success) {
                                paymentMessage.textContent = data.message;
                                paymentMessage.className = 'alert-message alert-success-custom';

                              
                                if (openPaymentModalButton) {
                                    openPaymentModalButton.disabled = true;
                                    openPaymentModalButton.textContent = 'Вече сте Бизнес Потребител';
                                    openPaymentModalButton.className = 'btn-current';
                                }

                                setTimeout(() => {
                                    paymentModal.style.display = 'none';
                                    window.location.reload();
                                }, 2000);
                            } else {
                                paymentMessage.textContent = data.message;
                                paymentMessage.className = 'alert-message alert-danger-custom';
                                payButton.disabled = false;
                            }
                        })
                        .catch(error => {
                            loadingSpinner.style.display = 'none';
                            paymentMessage.style.display = 'block';
                            paymentMessage.textContent = `Възникна грешка: ${error.message}`;
                            paymentMessage.className = 'alert-message alert-danger-custom';
                            payButton.disabled = false;
                            console.error('Error upgrading user:', error);
                        });
                    } else {
                        loadingSpinner.style.display = 'none';
                        paymentMessage.style.display = 'block';
                        paymentMessage.textContent = 'Плащането беше неуспешно. Моля, опитайте отново.';
                        paymentMessage.className = 'alert-message alert-danger-custom';
                        payButton.disabled = false;
                    }
                }, 2000);
            });
        });
    </script>
}
