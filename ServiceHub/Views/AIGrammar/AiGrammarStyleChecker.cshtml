@using Microsoft.AspNetCore.Identity
@using ServiceHub.Data.Models // Уверете се, че това сочи към вашия ApplicationUser клас
@using System.Security.Claims
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewData["Title"] = "Граматична и стилова проверка с AI";
    var currentUserId = User.FindFirstValue(System.Security.Claims.ClaimTypes.NameIdentifier);
    bool isBusinessUser = false;
    if (SignInManager.IsSignedIn(User))
    {
        var currentUser = await UserManager.GetUserAsync(User);
        if (currentUser != null)
        {
            isBusinessUser = await UserManager.IsInRoleAsync(currentUser, "BusinessUser"); 
        }
    }
}

<head>
    <style>
        .highlighted-error {
            background-color: #ffe6e6; 
            border-bottom: 2px solid #ff0000; 
            cursor: pointer;
            position: relative;
        }

        .error-popup {
            display: none;
            position: absolute;
            background-color: #333;
            color: #fff;
            padding: 8px;
            border-radius: 5px;
            font-size: 0.85em;
            white-space: nowrap;
            z-index: 1000;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            margin-bottom: 5px; 
        }
        .highlighted-error:hover .error-popup {
            display: block;
        }

        
        .text-area-container {
            display: flex;
            gap: 20px; 
        }
        .text-area-container > div {
            flex: 1; 
        }
        .text-area-container textarea {
            width: 100%;
            min-height: 250px; 
        }

       
        #originalTextDisplay {
            white-space: pre-wrap; 
            word-wrap: break-word;
            font-family: monospace; 
            font-size: inherit; 
            border: 1px solid #ced4da;
            padding: 8px;
            border-radius: 0.25rem;
            min-height: 250px;
            overflow-y: auto; 
        }
    </style>
</head>

<h1>Граматична и стилова проверка с AI</h1>
<p>Въведете текст за проверка на граматика и стил. Безплатната версия поддържа проверка само на български език. За проверка на английски език е необходим Бизнес акаунт.</p>

<div class="form-group mb-3">
    <label for="languageSelect" class="form-label">Изберете език:</label>
    <select id="languageSelect" class="form-control w-auto">
        <option value="bg">Български</option>
        <option value="en">English</option>
    </select>
</div>

<div class="text-area-container mb-3">
    <div>
        <label for="textInput" class="form-label">Въведете вашия текст тук:</label>
        <textarea id="textInput" class="form-control" placeholder="Въведете вашия текст тук..."></textarea>
        <div id="textInputValidation" class="text-danger"></div>
    </div>
    <div>
        <label for="correctedTextOutput" class="form-label">Коригиран текст (и/или оригинал с грешки):</label>
        <div id="originalTextDisplay"></div>
        <textarea id="correctedTextOutput" class="form-control" readonly style="display:none;"></textarea>
    </div>
</div>

<button id="checkButton" class="btn btn-primary mb-4">Провери</button>

<div id="resultContainer" class="mt-4" style="display:none;">
    <h3>Резултати от проверката:</h3>
    <div id="loadingIndicator" class="spinner-border text-primary" role="status" style="display:none;">
        <span class="visually-hidden">Loading...</span>
    </div>
    <div id="errorMessage" class="alert alert-danger" style="display:none;"></div>
    <div id="errorsSummary" class="mt-3" style="display:none;">
        <h4>Намерени грешки (<span id="errorCount">0</span>):</h4>
        <ul id="errorList" class="list-group">
          
        </ul>
    </div>
</div>

@section Scripts {
    <script>
        const isBusinessUser = @(isBusinessUser.ToString().ToLower());
        const textInput = document.getElementById('textInput');
        const languageSelect = document.getElementById('languageSelect');
        const checkButton = document.getElementById('checkButton');
        const resultContainer = document.getElementById('resultContainer');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const errorMessageDiv = document.getElementById('errorMessage');
        const originalTextDisplay = document.getElementById('originalTextDisplay');
        const correctedTextOutput = document.getElementById('correctedTextOutput');
        const errorsSummary = document.getElementById('errorsSummary');
        const errorList = document.getElementById('errorList');
        const errorCountSpan = document.getElementById('errorCount');
        const textInputValidation = document.getElementById('textInputValidation');

        originalTextDisplay.style.display = 'block';
        correctedTextOutput.style.display = 'none';

        languageSelect.addEventListener('change', () => {
            if (languageSelect.value === 'en' && !isBusinessUser) {
                errorMessageDiv.style.display = 'block';
                errorMessageDiv.textContent = "За проверка на английски език е необходим Бизнес акаунт. Моля, свържете се с нас за надграждане.";
                checkButton.disabled = true;
            } else {
                errorMessageDiv.style.display = 'none';
                errorMessageDiv.textContent = "";
                checkButton.disabled = false;
            }
        });

        if (languageSelect.value === 'en' && !isBusinessUser) {
            checkButton.disabled = true;
        }

        checkButton.addEventListener('click', async () => {
            resultContainer.style.display = 'none';
            loadingIndicator.style.display = 'block';
            errorMessageDiv.style.display = 'none';
            errorsSummary.style.display = 'none';
            errorList.innerHTML = '';
            originalTextDisplay.innerHTML = '';
            correctedTextOutput.value = '';
            textInputValidation.innerHTML = '';

            const text = textInput.value;
            const language = languageSelect.value;

            if (text.length < 10 || text.length > 5000) {
                textInputValidation.innerHTML = 'Текстът трябва да бъде между 10 и 5000 символа.';
                loadingIndicator.style.display = 'none';
                return;
            }

            if (language === 'en' && !isBusinessUser) {
                loadingIndicator.style.display = 'none';
                resultContainer.style.display = 'block';
                errorMessageDiv.style.display = 'block';
                errorMessageDiv.textContent = "За проверка на английски език е необходим Бизнес акаунт. Моля, свържете се с нас за надграждане.";
                return;
            }

            try {
                const response = await fetch('/api/Ai/check-grammar-style', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ text, language })
                });

                loadingIndicator.style.display = 'none';
                resultContainer.style.display = 'block';

                if (!response.ok) {
                    const errorData = await response.json();
                    errorMessageDiv.style.display = 'block';
                    errorMessageDiv.textContent = errorData.message || 'Възникна грешка при проверката.';
                    if (response.status === 400 && errorData.errors) {
                        let validationMessages = '';
                        for (const key in errorData.errors) {
                            if (errorData.errors.hasOwnProperty(key)) {
                                validationMessages += `<li>${errorData.errors[key].join(', ')}</li>`;
                            }
                        }
                        errorMessageDiv.innerHTML += `<ul class="mt-2">${validationMessages}</ul>`;
                    }
                    return;
                }

                const result = await response.json();

                if (result.isSuccessful) {
                    displayHighlightedText(result.originalText, result.errors);
                    errorCountSpan.textContent = result.errors.length;

                    if (result.errors && result.errors.length > 0) {
                        errorsSummary.style.display = 'block';
                        result.errors.forEach(error => {
                            const listItem = document.createElement('li');
                            listItem.classList.add('list-group-item');
                            listItem.innerHTML = `<strong>Грешка:</strong> ${error.message}<br>
                                                ${error.suggestedCorrection ? `<strong>Предложение:</strong> ${error.suggestedCorrection}<br>` : ''}
                                                <strong>Категория:</strong> ${error.category}`;
                            errorList.appendChild(listItem);
                        });
                    } else {
                        errorsSummary.style.display = 'block';
                        const listItem = document.createElement('li');
                        listItem.classList.add('list-group-item', 'list-group-item-info');
                        listItem.textContent = 'Не са намерени граматически или стилови грешки.';
                        errorList.appendChild(listItem);
                    }
                } else {
                    errorMessageDiv.style.display = 'block';
                    errorMessageDiv.textContent = result.errorMessage || 'AI проверката не беше успешна.';
                }

            } catch (error) {
                loadingIndicator.style.display = 'none';
                resultContainer.style.display = 'block';
                errorMessageDiv.style.display = 'block';
                errorMessageDiv.textContent = 'Възникна мрежова грешка или проблем със сървъра.';
                console.error('Fetch error:', error);
            }
        });

        function displayHighlightedText(originalText, errors) {
            let html = '';
            let lastIndex = 0;

            errors.sort((a, b) => a.startIndex - b.startIndex);

            errors.forEach(error => {
                html += escapeHtml(originalText.substring(lastIndex, error.startIndex));

                const errorText = originalText.substring(error.startIndex, error.endIndex);
                html += `<span class="highlighted-error" title="${escapeHtml(error.message)}">
                            ${escapeHtml(errorText)}
                            <span class="error-popup">
                                <strong>Грешка:</strong> ${escapeHtml(error.message)}<br>
                                ${error.suggestedCorrection ? `<strong>Предложение:</strong> ${escapeHtml(error.suggestedCorrection)}<br>` : ''}
                                <strong>Категория:</strong> ${escapeHtml(error.category)}
                            </span>
                         </span>`;
                lastIndex = error.endIndex;
            });

            html += escapeHtml(originalText.substring(lastIndex));

            originalTextDisplay.innerHTML = html;
        }

        function escapeHtml(text) {
            var map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return text.replace(/[&<>"']/g, function(m) { return map[m]; });
        }
    </script>
}