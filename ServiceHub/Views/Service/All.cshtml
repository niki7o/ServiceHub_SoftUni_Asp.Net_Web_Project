@model ServiceHub.Core.Models.ServiceAllViewModel
@using ServiceHub.Common.Enum
@using System.Text.RegularExpressions
@using Newtonsoft.Json 

@{
    ViewData["Title"] = "Всички Услуги";

    var currentCategoryFilter = Model.CurrentCategoryFilter;
    var currentAccessTypeFilter = Model.CurrentAccessTypeFilter;
    var currentSort = Model.CurrentSort;
    var currentFilter = Model.CurrentFilter;
    var currentPage = Model.CurrentPage;
    var totalPages = Model.TotalPages;
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>

<link rel="stylesheet" href="~/css/all.css" asp-append-version="true" />



<div class="services-page-container">
    <h2 class="page-title">Всички Услуги</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success" role="alert">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger" role="alert">
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="search-and-create-container">
        <input type="text" id="searchInput" class="form-control search-input" placeholder="Търсене на услуги по име или потребител" />
        @if (User.Identity.IsAuthenticated && User.IsInRole("BusinessUser") || User.IsInRole("Admin"))
        {
            <a asp-action="CreateTemplate" class="btn btn-success create-template-btn">
                <i class="fas fa-plus-circle"></i> Създай шаблон
            </a>
        }
    </div>

    <div id="searchResults" class="search-results-container">
        <p class="no-results"></p>
    </div>

    <div class="filter-sort-section mb-4">
        <form asp-action="All" method="get" id="filterForm">
            <input type="hidden" name="page" value="1" />

            <div class="row">
                <div class="col-md-3 mb-3">
                    <div class="form-group">
                        <label for="categoryFilter">Категория:</label>
                        <select name="categoryFilter" id="categoryFilter" class="form-select" asp-items="Model.Categories">
                        </select>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="form-group">
                        <label for="accessTypeFilter">Тип достъп:</label>
                        <select name="accessTypeFilter" id="accessTypeFilter" class="form-select" asp-items="Model.AccessTypes">
                        </select>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="form-group">
                        <label for="sort">Сортирай по:</label>
                        <select name="sort" id="sort" class="form-select">
                            <option value="">По подразбиране</option>
                            <option value="az" selected="@(Model.CurrentSort == "az")">Име (А-Я)</option>
                            <option value="za" selected="@(Model.CurrentSort == "za")">Име (Я-А)</option>
                            <option value="recent" selected="@(Model.CurrentSort == "recent")">Най-нови</option>
                            <option value="mostviewed" selected="@(Model.CurrentSort == "mostviewed")">Най-гледани</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="form-group">
                        <label for="filter">Филтрирай:</label>
                        <select name="filter" id="filter" class="form-select">
                            <option value="">Всички Услуги</option>
                            @if (User.Identity.IsAuthenticated)
                            {
                                <option value="favorite" selected="@(Model.CurrentFilter == "favorite")">Моите Любими</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-end mt-3">
                <button type="submit" class="btn apply-filters-btn">Приложи филтри</button>
                <a asp-action="All" class="btn clear-filters-btn">Изчисти филтри</a>
            </div>
        </form>
    </div>

    <div id="servicesListContainer" class="row">
        @if (!Model.Services.Any())
        {
            <p class="text-center text-light lead no-services-message">Няма намерени услуги, отговарящи на избраните критерии.</p>
        }
        else
        {
            @foreach (var service in Model.Services)
            {
                <div class="col-md-4 mb-4 service-card-wrapper" data-service-id="@service.Id">
                    <div class="service-card h-100">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@service.Title</h5>
                            <h6 class="card-subtitle">@service.CategoryName</h6>
                            <span class="access-badge badge @(service.AccessType == AccessType.Free ? "badge-free" : service.AccessType == AccessType.Premium ? "badge-premium" : "badge-partial")">
                                @service.AccessType
                            </span>
                            <p class="card-text flex-grow-1">
                                @(service.Description.Length > 120 ? service.Description.Substring(0, 120) + "..." : service.Description)
                            </p>

                            @if (service.IsTemplate && !service.IsApproved)
                            {
                                <div class="template-info">
                                    Създадена от: @service.CreatedByUserName <br />
                                    <small><i>(Услугата е в разработка и чака одобрение)</i></small>
                                </div>
                            }

                            <div class="card-footer-actions">
                                <div class="btn-group">
                                    <a asp-action="Details" asp-route-id="@service.Id" class="btn action-btn">Детайли</a>
                                    @if (User.Identity.IsAuthenticated)
                                    {
                                        <form asp-action="ToggleFavorite"
                                              asp-route-serviceId="@service.Id"
                                              asp-route-categoryFilter="@currentCategoryFilter"
                                              asp-route-accessTypeFilter="@currentAccessTypeFilter"
                                              asp-route-sort="@currentSort"
                                              asp-route-filter="@currentFilter"
                                              asp-route-page="@currentPage"
                                              method="post" class="d-inline">
                                            <button type="submit" class="btn favorite-btn @(service.IsFavorite ? "active" : "")">
                                                <i class="fas fa-star"></i> @(service.IsFavorite ? "Любими" : "Харесай")
                                            </button>
                                        </form>
                                    }
                                </div>
                                <small class="stats-text">
                                    <i class="fas fa-eye"></i> @service.ViewsCount
                                    <i class="fas fa-star gold"></i> @service.AverageRating.ToString("F1") (@service.ReviewCount)
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    @if (totalPages > 1)
    {
        <div class="pagination-container">
            <a asp-action="All" asp-route-page="@(currentPage - 1)"
               asp-route-categoryFilter="@currentCategoryFilter"
               asp-route-accessTypeFilter="@currentAccessTypeFilter"
               asp-route-sort="@currentSort"
               asp-route-filter="@currentFilter"
               class="btn pagination-btn @(currentPage == 1 ? "disabled" : "")">
                Предишна
            </a>

            @for (int i = 1; i <= totalPages; i++)
            {
                <a asp-action="All" asp-route-page="@i"
                   asp-route-categoryFilter="@currentCategoryFilter"
                   asp-route-accessTypeFilter="@currentAccessTypeFilter"
                   asp-route-sort="@currentSort"
                   asp-route-filter="@currentFilter"
                   class="btn pagination-page-number @(i == currentPage ? "active" : "")">
                    @i
                </a>
            }

            <a asp-action="All" asp-route-page="@(currentPage + 1)"
               asp-route-categoryFilter="@currentCategoryFilter"
               asp-route-accessTypeFilter="@currentAccessTypeFilter"
               asp-route-sort="@currentSort"
               asp-route-filter="@currentFilter"
               class="btn pagination-btn @(currentPage == totalPages ? "disabled" : "")">
                Следваща
            </a>
        </div>
    }
</div>

@section Scripts {
  

<script>
         window.AppConfig = {
                currentCategory: '@Model.CurrentCategoryFilter',
                currentAccessType: '@Model.CurrentAccessTypeFilter',
                currentSort: '@Model.CurrentSort',
                currentFilter: '@Model.CurrentFilter',
                modelServicesLength: @Model.Services.Count() 
            };
       document.addEventListener('DOMContentLoaded', function () {

        const categoryFilter = document.getElementById('categoryFilter');
        const accessTypeFilter = document.getElementById('accessTypeFilter');
        const sortFilter = document.getElementById('sort');
        const filterDropdown = document.getElementById('filter');
        const searchInput = document.getElementById('searchInput');
        const searchResultsDiv = document.getElementById('searchResults');
        const noResultsMessageElement = searchResultsDiv.querySelector('.no-results');
        const servicesListContainer = document.getElementById('servicesListContainer');
        const allServiceCards = servicesListContainer.querySelectorAll('.service-card-wrapper');
        const initialNoServicesMessage = servicesListContainer.querySelector('.no-services-message');
        const paginationContainer = document.querySelector('.pagination-container');

        let searchTimeout;
        const transitionDuration = 300;

        function applySingleCardStyles() {
            const visibleCards = Array.from(allServiceCards).filter(card => card.style.display !== 'none' && !card.classList.contains('hide'));

            allServiceCards.forEach(card => card.classList.remove('single-visible-card'));

            if (visibleCards.length === 1) {
                visibleCards[0].classList.add('single-visible-card');
            }
        }


        const currentCategory = window.AppConfig.currentCategory;
        if (categoryFilter) {
            categoryFilter.value = currentCategory;
        }

        const currentAccessType = window.AppConfig.currentAccessType;
        if (accessTypeFilter) {
            accessTypeFilter.value = currentAccessType;
        }

        const currentSort = window.AppConfig.currentSort;
        if (sortFilter) {
            sortFilter.value = currentSort;
        }

        const currentFilterValue = window.AppConfig.currentFilter;
        if (filterDropdown) {
            filterDropdown.value = currentFilterValue;
        }

      
        const successMessageExists = window.AppMessages.hasSuccessMessage;
        const errorMessageExists = window.AppMessages.hasErrorMessage;

        if (successMessageExists || errorMessageExists) {
            if (searchInput) {
                searchInput.value = '';

                allServiceCards.forEach(card => {
                    card.style.display = '';
                    card.classList.remove('hide');
                });
                noResultsMessageElement.textContent = '';
                searchResultsDiv.classList.remove('show');
                searchResultsDiv.style.display = 'none';

                if (initialNoServicesMessage) {
                    initialNoServicesMessage.classList.add('hide');
                    initialNoServicesMessage.style.display = 'none';
                }

                if (paginationContainer) {
                    paginationContainer.style.display = '';
                    paginationContainer.classList.remove('hide');
                }
                applySingleCardStyles();
            }
        }

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/searchHub")
            .build();

        connection.on("ReceiveSearchResults", (services) => {
            const foundServiceIds = new Set(services.map(s => s.id));
            let foundCount = 0;

            allServiceCards.forEach(card => {
                const serviceId = card.dataset.serviceId;
                if (foundServiceIds.has(serviceId)) {
                    card.style.display = '';
                    setTimeout(() => {
                        card.classList.remove('hide');
                    }, 10);
                    foundCount++;
                } else {
                    card.classList.add('hide');
                    setTimeout(() => {
                        card.style.display = 'none';
                    }, transitionDuration);
                }
            });

            setTimeout(applySingleCardStyles, transitionDuration + 50);

            if (foundCount === 0 && searchInput.value.trim().length > 0) {
                noResultsMessageElement.textContent = 'Няма намерени услуги.';
                searchResultsDiv.classList.add('show');
                searchResultsDiv.style.display = 'block';
                if (initialNoServicesMessage) initialNoServicesMessage.classList.add('hide');
                if (paginationContainer) {
                    paginationContainer.classList.add('hide');
                    setTimeout(() => { paginationContainer.style.display = 'none'; }, transitionDuration);
                }
            } else {
                noResultsMessageElement.textContent = '';
                searchResultsDiv.classList.remove('show');
                setTimeout(() => { searchResultsDiv.style.display = 'none'; }, transitionDuration);

                if (initialNoServicesMessage && window.AppConfig.modelServicesLength === 0 && searchInput.value.trim().length === 0) {
                    initialNoServicesMessage.classList.remove('hide');
                    initialNoServicesMessage.style.display = 'block';
                } else if (initialNoServicesMessage) {
                    initialNoServicesMessage.classList.add('hide');
                    setTimeout(() => { initialNoServicesMessage.style.display = 'none'; }, transitionDuration);
                }

                if (paginationContainer) {
                    paginationContainer.style.display = '';
                    setTimeout(() => { paginationContainer.classList.remove('hide'); }, 10);
                }
                applySingleCardStyles();
            }
        });

        connection.start().catch(err => console.error(err.toString()));

        searchInput.addEventListener('keyup', () => {
            clearTimeout(searchTimeout);
            const searchTerm = searchInput.value.trim();

            if (searchTerm.length > 2) {
                searchTimeout = setTimeout(() => {
                    connection.invoke("SearchServices", searchTerm).catch(err => console.error(err.toString()));
                }, 300);
            } else if (searchTerm.length === 0) {
                allServiceCards.forEach(card => {
                    card.style.display = '';
                    setTimeout(() => { card.classList.remove('hide'); }, 10);
                });
                noResultsMessageElement.textContent = '';
                searchResultsDiv.classList.remove('show');
                setTimeout(() => { searchResultsDiv.style.display = 'none'; }, transitionDuration);

                if (initialNoServicesMessage && window.AppConfig.modelServicesLength === 0) {
                    initialNoServicesMessage.classList.remove('hide');
                    initialNoServicesMessage.style.display = 'block';
                } else if (initialNoServicesMessage) {
                    initialNoServicesMessage.classList.add('hide');
                    setTimeout(() => { initialNoServicesMessage.style.display = 'none'; }, transitionDuration);
                }

                if (paginationContainer) {
                    paginationContainer.style.display = '';
                    setTimeout(() => { paginationContainer.classList.remove('hide'); }, 10);
                }
                applySingleCardStyles();
            } else {
                allServiceCards.forEach(card => {
                    card.style.display = '';
                    setTimeout(() => { card.classList.remove('hide'); }, 10);
                });
                noResultsMessageElement.textContent = '';
                searchResultsDiv.classList.remove('show');
                setTimeout(() => { searchResultsDiv.style.display = 'none'; }, transitionDuration);

                if (initialNoServicesMessage) {
                    initialNoServicesMessage.classList.add('hide');
                    setTimeout(() => { initialNoServicesMessage.style.display = 'none'; }, transitionDuration);
                }

                if (paginationContainer) {
                    paginationContainer.style.display = '';
                    setTimeout(() => { paginationContainer.classList.remove('hide'); }, 10);
                }
                applySingleCardStyles();
            }
        });

        searchInput.addEventListener('focus', () => {
            const searchTerm = searchInput.value.trim();
            if (searchTerm.length > 0) {
                connection.invoke("SearchServices", searchTerm).catch(err => console.error(err.toString()));
            } else {
                allServiceCards.forEach(card => {
                    card.style.display = '';
                    setTimeout(() => { card.classList.remove('hide'); }, 10);
                });
                noResultsMessageElement.textContent = '';
                searchResultsDiv.classList.remove('show');
                setTimeout(() => { searchResultsDiv.style.display = 'none'; }, transitionDuration);

                if (initialNoServicesMessage && window.AppConfig.modelServicesLength === 0) {
                    initialNoServicesMessage.classList.remove('hide');
                    initialNoServicesMessage.style.display = 'block';
                } else if (initialNoServicesMessage) {
                    initialNoServicesMessage.classList.add('hide');
                    setTimeout(() => { initialNoServicesMessage.style.display = 'none'; }, transitionDuration);
                }

                if (paginationContainer) {
                    paginationContainer.style.display = '';
                    setTimeout(() => { paginationContainer.classList.remove('hide'); }, 10);
                }
            }
        });

        document.addEventListener('click', function (event) {
            if (!searchResultsDiv.contains(event.target) && event.target !== searchInput) {
                searchResultsDiv.classList.remove('show');
                setTimeout(() => { searchResultsDiv.style.display = 'none'; }, transitionDuration);
            }
        });
    });

</script>
}

