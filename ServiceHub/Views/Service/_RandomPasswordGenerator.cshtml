﻿@{
    ViewData["Title"] = "Генератор на Случайни Пароли";
}

<h2 class="text-center my-4">Генератор на Случайни Пароли</h2>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label for="passwordLength">Дължина на паролата:</label>
                <input type="number" class="form-control" id="passwordLength" value="12" min="8" max="32">
            </div>
            <div class="form-check mt-3">
                <input class="form-check-input" type="checkbox" id="includeUppercase" checked>
                <label class="form-check-label" for="includeUppercase">
                    Включи главни букви (A-Z)
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="includeLowercase" checked>
                <label class="form-check-label" for="includeLowercase">
                    Включи малки букви (a-z)
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="includeDigits" checked>
                <label class="form-check-label" for="includeDigits">
                    Включи цифри (0-9)
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="includeSpecialChars" checked>
                <label class="form-check-label" for="includeSpecialChars">
                    Включи специални символи (!#$%^&*)
                </label>
            </div>
            <button id="generateButton" class="btn btn-primary mt-3">Генерирай Парола</button>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label for="generatedPassword">Генерирана парола:</label>
                <input type="text" class="form-control" id="generatedPassword" readonly style="background-color: #e9ecef;">
            </div>
            <div id="generationMessage" class="mt-2 text-info" style="display:none;"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('generateButton').addEventListener('click', async () => {
            const length = parseInt(document.getElementById('passwordLength').value);
            const includeUppercase = document.getElementById('includeUppercase').checked;
            const includeLowercase = document.getElementById('includeLowercase').checked;
            const includeDigits = document.getElementById('includeDigits').checked;
            const includeSpecialChars = document.getElementById('includeSpecialChars').checked;
            const generatedPasswordInput = document.getElementById('generatedPassword');
            const generationMessage = document.getElementById('generationMessage');

            generatedPasswordInput.value = '';
            generationMessage.style.display = 'none';
            generationMessage.textContent = '';

            if (length < 8 || length > 32) {
                generationMessage.textContent = 'Дължината на паролата трябва да е между 8 и 32 символа.';
                generationMessage.className = 'mt-2 text-danger';
                generationMessage.style.display = 'block';
                return;
            }

            if (!includeUppercase && !includeLowercase && !includeDigits && !includeSpecialChars) {
                generationMessage.textContent = 'Моля, изберете поне един тип символи.';
                generationMessage.className = 'mt-2 text-danger';
                generationMessage.style.display = 'block';
                return;
            }

            try {
                const response = await fetch('/api/RandomPasswordGenerator/generate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        length: length,
                        includeUppercase: includeUppercase,
                        includeLowercase: includeLowercase,
                        includeDigits: includeDigits,
                        includeSpecialChars: includeSpecialChars
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    generatedPasswordInput.value = result.generatedPassword;
                    generationMessage.textContent = result.message || 'Паролата е генерирана успешно.';
                    generationMessage.className = 'mt-2 text-success';
                    generationMessage.style.display = 'block';
                } else {
                    let errorMessage = `Грешка: ${response.status} ${response.statusText}`;
                    try {
                        const errorData = await response.json();
                        errorMessage = errorData.errors ? Object.values(errorData.errors).flat().join('; ') : (errorData.message || errorData.title || errorMessage);
                    } catch (jsonError) {
                        errorMessage = `Грешка: ${response.status} ${response.statusText}. Невалиден отговор от сървъра.`;
                        console.error('Failed to parse error response as JSON:', jsonError);
                    }
                    generationMessage.textContent = errorMessage;
                    generationMessage.className = 'mt-2 text-danger';
                    generationMessage.style.display = 'block';
                }
            } catch (error) {
                console.error('Fetch error:', error);
                generationMessage.textContent = `Възникна мрежова грешка: ${error.message}.`;
                generationMessage.className = 'mt-2 text-danger';
                generationMessage.style.display = 'block';
            }
        });
    </script>
}